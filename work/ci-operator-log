#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Author: Chmouel Boudjnah <chmouel@chmouel.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
import argparse
import datetime
import json
import re
import subprocess
import sys
import time

import termcolor

parser = argparse.ArgumentParser()
parser.add_argument("--last", '-l', action="store_true", default=False)
parser.add_argument("queries", nargs="*", default="")
args = parser.parse_args(sys.argv[1:])

shell = subprocess.run("oc whoami --show-server=true".split(" "),
                       stderr=subprocess.PIPE,
                       stdout=subprocess.PIPE)

if shell.returncode != 0 or 'api.ci.openshift.org' not in shell.stdout.decode(
):
    print("""
          This script has been designed to work on the ci.openshift server Go to
          https://api.ci.openshift.org and get a token from the 'Copy Login
          command' top right hamburger menu.
          """)
    sys.exit(1)

command = [
    "oc", "get", "pod", "-n", "ci", "--sort-by=.metadata.creationTimestamp",
    "-l", "prow.k8s.io/refs.repo=tektoncd-pipeline", "-ojson"
]

shell = subprocess.run(command, stdout=subprocess.PIPE, check=True)
ciruns = json.loads(shell.stdout)
if not ciruns['items']:
    print("All CI Runs for {targetrepo} has been deleted"
          " already, rerun a test to have another one appears")
    sys.exit(1)

ret = []
for run in ciruns['items']:
    jobspec = None
    for x in run['spec']['containers'][0]['env']:
        if x['name'] == 'JOB_SPEC':
            jobspec = json.loads(x['value'])

    ret.append("%s - %s/%s#%s - %s - %s" % (
        run['status']['startTime'],
        run['metadata']['labels']['prow.k8s.io/refs.org'],
        run['metadata']['labels']['prow.k8s.io/refs.repo'],
        run['metadata']['labels'].get('prow.k8s.io/refs.pull', ""),
        "-".join(run['metadata']['labels']['prow.k8s.io/job'].split("-")[-2:]),
        run['metadata']['name'],
    ))

if not ret:
    sys.exit(1)

if args.queries:
    initial_query = " ".join(args.queries)
else:
    initial_query = "e2e"

ret.reverse()
if args.last:
    r = ret[0]
else:
    p = subprocess.run(["fzf", "-q", initial_query],
                       stdout=subprocess.PIPE,
                       input="\n".join(ret).encode())

    if p.returncode != 0:
        sys.exit(1)
    r = p.stdout.decode().strip()

pod_name = r.split(" ")[-1]


def get_log_container(namespace,
                      pod_name,
                      container_name,
                      finish_on=None,
                      follow=False,
                      highlights=[]):
    since = ""
    retall = []
    cmd = f"oc logs -n {namespace} {pod_name} -c {container_name}"
    print(cmd + " --follow")
    while True:
        marktime = datetime.datetime.now().isoformat("T") + "Z"
        if since:
            cmd += " " + since
        p = subprocess.run(cmd.split(" "),
                           stdout=subprocess.PIPE,
                           stderr=subprocess.PIPE)
        output = p.stdout.decode().strip()
        if not output:
            time.sleep(5)
            continue
        ret = []
        for line in output.split("\n"):
            _add = True
            retall.append(line)
            if finish_on and re.match(finish_on, line):
                follow = False
            for reg, colour in highlights:
                m = re.match(reg, line)
                if m:
                    ret.append(termcolor.colored(line, colour, attrs=['bold']))
                    _add = False
                    break
            if _add:
                ret.append(line)

        print("\n".join(ret))

        if follow:
            since = f"--since-time={marktime}"
            time.sleep(5)
        else:
            return retall
    return retall


ret = get_log_container(
    "ci",
    pod_name,
    "test",
    follow=True,
    finish_on=".*(Container (setup|cli) in.*completed successfully).*",
    highlights=[(".*Resolved source https.*", "cyan"),
                ("ERROR: timeout waiting for pods to come up", "red"),
                (".*Build.*succeeded after \d+", "magenta"),
                (".*completed successfully.*", "green"),
                (".*Creating namespace.*", "yellow")])
namespace = None
for line in ret:
    m = re.match(r"ERROR: timeout waiting for pods to come up", line)
    if m:
        print("")
        cmd = f"oc logs -n ci {pod_name} -c test --follow"
        print(
            termcolor.colored(
                "ERROR while running the test go digg into the log :(",
                "red",
                attrs=['bold']) + "\n\t" + cmd)

        sys.exit(1)
    m = re.match(".*Creating namespace (.*)", line)
    if m:
        namespace = m.group(1)

if not namespace:
    print("Could not find the namespace used")
    sys.exit(1)

ret = get_log_container(namespace,
                        "e2e",
                        "setup",
                        follow=True,
                        finish_on=".*Access the OpenShift web-console here:.*",
                        highlights=[
                            ("https://.*", "cyan"),
                            (".*Waiting up to", "magenta"),
                        ])
docontinue = False
for line in ret:
    m = re.match(".*Access the OpenShift web-console here:.*", line)
    if m:
        docontinue = True

if not docontinue:
    print("Cluster had an issue to spin up it seems?")
    sys.exit(1)

command = [
    "oc", "cp", "-c", "artifacts", "-n", namespace,
    "e2e:/tmp/artifacts/installer/auth/kubeconfig", "/tmp/kubeconfig"
]

shell = subprocess.run(command, stdout=subprocess.PIPE)
print(shell.stdout.read())
