#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Author: Chmouel Boudjnah <chmouel@chmouel.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
import termcolor
import argparse
import json
import re
import subprocess
import datetime
import sys
import time

parser = argparse.ArgumentParser()
parser.add_argument("--last", '-l', action="store_true", default=False)
args = parser.parse_args(sys.argv[1:])

shell = subprocess.run(
    "oc whoami --show-server=true".split(" "),
    stderr=subprocess.PIPE,
    stdout=subprocess.PIPE)

if shell.returncode != 0 or 'api.ci.openshift.org' not in shell.stdout.decode(
):
    print("""
          This script has been designed to work on the ci.openshift server Go to
          https://api.ci.openshift.org and get a token from the 'Copy Login
          command' top right hamburger menu.
          """)
    sys.exit(1)

command = [
    "oc", "get", "pod", "-n", "ci", "--sort-by=.metadata.creationTimestamp",
    "-l", "prow.k8s.io/refs.repo=tektoncd-pipeline", "-ojson"
]

shell = subprocess.run(command, stdout=subprocess.PIPE)
ciruns = json.loads(shell.stdout)
if not ciruns['items']:
    print("All CI Runs for {targetrepo} has been deleted"
          " already, rerun a test to have another one appears")
    sys.exit(1)

ret = []
for run in ciruns['items']:
    jobspec = None
    for x in run['spec']['containers'][0]['env']:
        if x['name'] == 'JOB_SPEC':
            jobspec = json.loads(x['value'])

    ret.append(
        "#%s - @%s - %s - %s - %s" %
        (jobspec['refs']['pulls'][0]['number'],
         jobspec['refs']['pulls'][0]['author'], run['status']['startTime'],
         run['metadata']['labels']['prow.k8s.io/job'],
         run['metadata']['name']), )

if not ret:
    sys.exit(1)

ret.reverse()
if args.last:
    r = ret[0]
else:
    p = subprocess.run(["fzf"],
                       stdout=subprocess.PIPE,
                       input="\n".join(ret).encode())

    if p.returncode != 0:
        sys.exit(1)
    r = p.stdout.decode().strip()

pod_name = r.split(" ")[-1]
job_type = r.split(" ")[-3]


def get_log_container(namespace,
                      pod_name,
                      container_name,
                      finish_on=None,
                      follow=False,
                      highlights=[]):
    since = ""
    retall = []
    cmd = f"oc logs -n {namespace} {pod_name} -c {container_name} --follow"
    print(cmd)
    while True:
        marktime = datetime.datetime.now().isoformat("T") + "Z"
        if since:
            cmd += " " + since
        p = subprocess.run(
            cmd.split(" "), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        output = p.stdout.decode().strip()
        if not output:
            time.sleep(5)
            continue
        ret = []
        for line in output.split("\n"):
            _add = True
            if finish_on and re.match(finish_on, line):
                follow = False
            for reg, colour in highlights:
                m = re.match(reg, line)
                if m:
                    ret.append(termcolor.colored(line, colour, attrs=['bold']))
                    _add = False
                    break
            if _add:
                ret.append(line)

        print("\n".join(ret))

        if follow:
            since = f"--since-time={marktime}"
            time.sleep(5)
        else:
            return retall


ret = get_log_container(
    "ci",
    pod_name,
    "test",
    follow=True,
    finish_on=".*Container setup in.*completed successfully.*",
    highlights=[(".*Resolved source https.*", "cyan"),
                (".*Build.*succeeded after \d+", "magenta"),
                (".*completed successfully.*", "green"),
                (".*Creating namespace.*", "yellow")])
for line in ret:
    m = re.match(".*Using namespace (.*)", line)
    if m:
        print(m)
        break
