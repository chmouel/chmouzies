#!/usr/bin/env zsh
set -e
# set -x

profile=chmouel
prefixk=os4
operator=
releaseyaml=
koinstall=

BASE_URL=https://osinstall.chmouel.com

while getopts ':korR' arg;do
    case $arg in
      (R) reinstall=yes ;;
      (o) operator=yes ;;
      (r) releaseyaml=yes ;;
      (k) koinstall=yes  ;;
      (\?) print invalid option: $OPTARG;exit 1;;
    esac
done

(( OPTIND > 1 )) && shift $(( OPTIND - 1 ))

[[ -n ${1} ]] && { profile=$1; }
[[ -n ${2} ]] && { prefixk=$2; }

export KUBECONFIG=~/.kube/config.${prefixk}
curl -# -f ${BASE_URL}/${profile}/kubeconfig.gpg | gpg --quiet --decrypt > ${KUBECONFIG}
echo "export KUBECONFIG=${KUBECONFIG}"


function operatorinstall() {
    cat <<EOF | oc apply -f-
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: pipelines
  namespace: openshift-operators
spec:
  channel: dev-preview
  name: tekton-operator
  source: community-operators
  sourceNamespace: openshift-marketplace
EOF
}

function releaseyamlinstall {
    osinstall=https://osinstall.chmouel.com/release/pipeline/nightly.yaml
    curl -sILf -o/dev/null -f ${osinstall} && yaml=${osinstall}

    [[ -z ${yaml} ]] && {
        yaml=https://raw.githubusercontent.com/openshift/tektoncd-pipeline/release-next/openshift/release/tektoncd-pipeline-nightly.yaml
        curl -sILf -o/dev/null -f ${yaml} || {
            stable_version=$(curl -s https://api.github.com/repos/tektoncd/pipeline/releases | python -c "import sys, json;x=json.load(sys.stdin);print(x[0]['tag_name'])")
            yaml=https://raw.githubusercontent.com/openshift/tektoncd-pipeline/release-${stable_version}/openshift/release/tektoncd-pipeline-${stable_version}.yaml
        }
    }
    echo ">>> Installing: $(basename ${yaml})"
    [[ -n ${reinstall} ]]  && { oc delete -f ${yaml} || true ;}
    oc create -f ${yaml}
	echo ">>>  Installing Triggers"
	oc create -f https://storage.googleapis.com/tekton-releases/triggers/latest/release.yaml
}

function koinstall {
    cd $GOPATH/src/github.com/tektoncd/pipeline

    ${HOME}/bin/git-downup-update-repos

    currentbranch=$(git symbolic-ref -q HEAD);currentbranch=${currentbranch#refs/heads/}
    changed=$(git status --porcelain)
    if [[ -n ${changed} ]];then
        git stash save -a -u "Staged before running an update $(date)"
    fi

    git checkout master

    info() {
        echo "Job has failed you can run"
        echo "  git checkout ${currentbranch}"
        [[ -n ${changed} ]] && echo " and git stash pop";
    }
    trap info ERR

    export GO111MODULE=off
    ko apply -f config/

    git checkout ${currentbranch}

    if [[ -n ${changed} ]];then
        git stash pop
    fi
}

if [[ -n ${koinstall} ]]; then
    koinstall
elif [[ -n ${releaseyaml} ]];then
    releaseyamlinstall
elif [[ -n ${operator} ]];then
    operatorinstall
else
    exit
fi

sleep 3

oc project tekton-pipelines
oc get pod -owide
