#!/bin/bash
# Get Latest ci-op cluster access
# Chmouel Boudjnah <chmouel@chmouel.com>
set -e


JOB_NAME=${1:-"e2e"}
KOUTPUT="${HOME}/.kube/config.ci-operator"

TMP=$(mktemp /tmp/.mm.XXXXXX)
clean() { rm -f ${TMP}; }
trap clean EXIT

function wait_and_log() {
    local ns=${1}
    local pod=${2}
    local phase=${3}
    local grepend="${4}"
    local previous_log= log= diff=

    while True;do
        _s=$(oc get pod ${pod/pod\/} -n ${ns} -o template="{{ .status.phase }}")
        [[ ${_s} == "Terminated" ]] && {
            log="$(oc logs -n ${ns} ${pod} -c ${phase} --tail=10)"
            echo "${log}" | tail ${TMP}
            break
        }

        [[ ${_s} != "Running" ]] && {
            echo "Waiting pod ${pod/pod\/} to come in '${_s}' phase "
            sleep 2
            continue
        }
        log="$(oc logs -n ${ns} ${pod} -c ${phase} --tail=10)"

        [[ "${log}" == "${previous_log}" ]] && { sleep 2;continue ;}

        finis=$(echo "${log}"|egrep "${grepend}" || true)
        [[ -n ${finis} ]] && {
            echo "${finis}" > ${TMP}
            return
        }

        if [[ -n ${previous_log} ]];then
            diff="$(diff -u <(echo "${previous_log}") <(echo "$log") || true)"
            echo "${diff}" | sed -n '/^+++/d;/^\+/ {s/^.//;p;}'
        else
            echo "${log}"
        fi
        previous_log="${log}"
        sleep 1
    done
}

oc whoami --show-server=true|grep -q api.ci.openshift.org || {
    echo "This is designed to be running on ci.openshift"
    echo "Go to https://api.ci.openshift.org and get a token from the 'Copy Login command' top right menu"
    exit 1
}


project=$(oc get project |grep '^ci-op'|fzf -1|awk '{print $1}')
if [[ -z ${project} ]];then
    echo "I could not find any project that starts with ci-op in the list of projects"
    echo "something is fishy in there."
    exit 1
fi

_cnt=0
echo "Waiting for pods with prefix ${JOB_NAME} to comes up.."
while True;do
    job_pod=$(oc get pod -n ${project} -o name|grep "^pod/${JOB_NAME}" || true)
    [[ -n ${job_pod} ]] && {
        break
    }
    [[ ${_cnt} == 60 ]] && { echo "We can't find no pod with prefix ${JOB_NAME}"; exit 1 ;}
    (( _cnt++ ))
    sleep 5
done


echo "Found pod ${JOB_NAME} in namespace ${project} ...."
wait_and_log ${project} ${JOB_NAME} setup ".*Access the OpenShift web-console here.*"

clusterurl=$(egrep 'Access the OpenShift web-console here.*(https.*)"' ${TMP}|sed 's%.*https%https%;s/"$//')
terminal-notifier -title 'Cluster has started' -message "CI has been Built on ${clusterurl}" -appIcon /Users/chmouel/Downloads/centos.png -open "${clusterurl}" -ignoreDnD

oc rsh -n ${project} -c test ${JOB_NAME} cat /tmp/artifacts/installer/auth/kubeconfig > ${KOUTPUT}
echo
echo "You can access the cluster with this kubeconfig:"
echo export KUBECONFIG=${KOUTPUT}
echo

wait_and_log ${project} ${JOB_NAME} "test" ".*E2E TESTS PASSED.*"

echo export KUBECONFIG=${KOUTPUT}

export KUBECONFIG=${KOUTPUT}
# # Probably knative/tekton specific so you may not need it so fel free to rip this off,
# for p in $(oc get project -o name|grep arendelle|sed 's/.*\///');do
#     output=$(oc get pod -o name -n $p 2>/dev/null)
#     [[ -n ${output} ]] && {
#         oc project ${p}
#         oc describe "${output}"
#         break
#     }
# done
