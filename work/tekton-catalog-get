#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Author: Chmouel Boudjnah <chmouel@chmouel.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
import argparse
import base64
import json
import subprocess
import sys
import urllib.request

MAIN_BRANCH = "main"


def execute(command):
    """Execute commmand"""
    result = subprocess.run(["/bin/sh", "-c", command],
                            stdout=subprocess.PIPE,
                            stderr=subprocess.STDOUT,
                            check=True)
    return result.stdout.decode().strip()


def make_request(url):
    try:
        token = execute("git config --get github.token")
    except (subprocess.CalledProcessError):
        print(
            """You need to setup a github token in your gitconfig in section :

[github]
token=THETOKEN

i.e from CLI: it config --global --add github.token THETOKEN

make sure that gitconfig is kept secrets via an include file or others.""")
        sys.exit(1)
    req = urllib.request.Request(url)
    req.add_header("Authorization", f"token {token}")
    return json.load(urllib.request.urlopen(req))


def get_task(task_name):
    tree_taskdir = make_request(
        f"https://api.github.com/repos/tektoncd/catalog/git/trees/{MAIN_BRANCH}"
    )

    url = [x["url"] for x in tree_taskdir["tree"] if x["path"] == "task"]
    if not url:
        raise Exception("Cannot find task directory???")

    taskname_tree = make_request(url[0])
    task_url = [
        x["url"] for x in taskname_tree["tree"] if x["path"] == task_name
    ]
    if not task_url:
        raise Exception(f"Cannot find {task_name} in catalog???")

    task_tree = make_request(task_url[0])
    task_tree['tree'].sort(key=lambda s: list(map(int, s['path'].split('.'))),
                           reverse=True)
    all_versions_of_task = make_request(task_tree['tree'][0]["url"])
    print()
    raw_url = [
        x["url"] for x in all_versions_of_task["tree"]
        if x["path"] == task_name + ".yaml"
    ]

    if not raw_url:
        raise Exception(f"Cannot find task {task_name}.yaml in directory")

    return (base64.b64decode(make_request(raw_url[0])["content"]).decode())


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Get latest task from catalog, eg: kubectl apply -f <(./tekton-catalog-get git-clone)'
    )
    parser.add_argument('task_name')
    args = parser.parse_args()
    print(get_task(args.task_name))
