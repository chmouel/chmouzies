#!/usr/bin/env bash
# -*- coding: utf-8 -*-
# Author: Chmouel Boudjnah <chmouel@chmouel.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# Detect if commmit has been merged, on prow or other merger that rewrites the
# commits on merge we cannot do stuff like "git branch --merged| egrep -v
# "(^\*|master|dev)" to get the merged commit.
#
# To address that we Go over every commits in ${MASTER}, md5 compute the author
# date/commit subject/commit message and check if that md5 is in the ${MASTER}
# commits (limit to ${LIMIT})
set -eu

IGNORES="release-next*|openshift-master"
MASTER=master
LIMIT=200
COMMUTEFORMAT="%ad/%s/%b"

declare -A hasht
declare -a DONED=("")

for commit in $(git log --no-merges ${MASTER} -n ${LIMIT} -q --format=format:%h);do
    summedcommit=$(git show $commit --pretty=format:"${COMMUTEFORMAT}" --no-patch|md5sum|sed 's/ .*//')
    hasht[$summedcommit]=${commit}
done

for branch in $(git branch -l -q|sed -r 's/^(\*)? //;s/^ //');do
    [[ ${branch} == ${MASTER} ]] && continue
    [[ ${branch} =~ ${IGNORES} ]] && continue

    for commit in $(git log --no-merges ${branch} '^master' -q '--format=format:%h');do
        skip=
        for d in ${DONED[@]};do
            [[ ${branch} == ${d} ]] && skip=true
        done
        [[ -n ${skip} ]] && continue
    
        summedcommit=$(git show ${commit} \
                       --pretty=format:"${COMMUTEFORMAT}" --no-patch|md5sum|sed 's/ .*//')
        for h in ${!hasht[@]};do
            [[ ${h} == ${summedcommit} ]] && {
                DONED+=(${branch})
                read -n1 -e -p "Branch ${branch} is in ${MASTER}, do you want to delete [Ny]: " answer
                [[ ${answer,,} == y ]] && {
                    echo git branch -D ${branch}
                }
            }
        done
        
    done
done
