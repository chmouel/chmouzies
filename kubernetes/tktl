#!/usr/bin/env zsh
## Need kubectl/fzf/python3/jq/tkn
set -eu
local preview pods p follow choose_containers containeri container use_tkn
local use_kss last

function help {
    cat <<EOF
tktl [TASK Query] [Container Query]"

Queries are initial queries for selection on fzf, i.e:

tktl buildah push

will autoselect the buildah taskrun (or ask to choose if there is multiple) and
the push container

Flags:

-l select the last taskruns
-f follow logs
-K use kss for previewing the taskruns (need to be installed)
-t use tkn to display the logs
-c choose a specific container (ie step) not supported with -t

EOF
}
while getopts 'lhfKtc' arg
do
    case $arg in
        (l) last="true";;
        (f) follow="-f"  ;;
        (K) use_kss=yes ;;
        (t) use_tkn="yes";;
        (c) use_tkn="" choose_containers="yes";; # use kubectl until tkn support limiting to container we should be implicit
        (h) help; exit 0;;
        (\?) help;exit 1;;
    esac
done
(( OPTIND > 1 )) && shift $(( OPTIND - 1 ))

chooseTaskArg=${1:-""};[[ -n ${chooseTaskArg} ]] && chooseTaskArg="-q ${chooseTaskArg}"
chooseContainerArg=${2:-""}

if [[ -n ${use_kss} ]];then
    preview='kss `kubectl get -o json tr {}| jq -r .status.podName`'
else
    preview='tkn taskrun describe {}'
fi

kubectl get tr 2>/dev/null >/dev/null || {
    echo "Could not connect or could not detect a TaskRun object on the server."
    exit 1
}
if [[ -n ${last} ]];then
    task=$(kubectl get tr -o name --sort-by=.metadata.creationTimestamp|sed 's,.*/,,'|tail -1)
else
    task=$(kubectl get tr -o json --sort-by=.metadata.creationTimestamp| python <(cat  <<EOF
import json,sys
jeez=json.loads(sys.stdin.read())
def colit(condition, name):
    if condition=='Succeeded':
       color=32
    elif condition=='Failed':
       color=31
    elif condition=='Running':
       color=34
    else:
       color=30
    return("\033[1;%dm%s\033[0;0m" % (color, name))
for i in jeez['items']:
    print(colit(i['status']['conditions'][0]['reason'], i['metadata']['name']))

EOF
  ) | fzf --ansi -1 ${chooseTaskArg} --tac \
          --header "Choose a taskrun" \
          --preview  ${preview})
fi

[[ -z ${task} ]] && return

podName=$(kubectl get tr -o json ${task} | jq -r '.status.podName')
if [[ -n ${choose_containers} ]];then
    [[ -n ${chooseContainerArg} ]] && containeri="-q ${chooseContainerArg}"

    containers=$(kubectl get pod ${podName} -o json|python <(cat  <<EOF
import json,sys,datetime
jeez=json.loads(sys.stdin.read())
ret={}
for i in jeez['spec']['containers']:
    for c in jeez['status']['containerStatuses'] + jeez['status']['initContainerStatuses']:
        if i['name'] != c['name']:
            continue
        if 'terminated' in c['state']:
           k = 'terminated'
           if c['state']['terminated']['reason'] == 'Error':
              color=31
           elif c['state']['terminated']['reason'] == 'Completed':
              color=32
           else:
              color=30
        elif 'running' in c['state']:
           k = 'running'
           color = 34
        else:
            print(c['state'])
        ret[c['name']] = {'started':
            datetime.datetime.strptime(c['state'][k]['startedAt'][:-1],'%Y-%m-%dT%H:%M:%S'),
            'color': color, 'state': c['state']}

for x in sorted(ret.items(), key=lambda p: p[1]['started']):
    print("\033[1;%dm%s\033[0;0m" % (x[1]['color'], x[0].replace("step-", "")))
EOF
) | fzf --ansi --header "Choose a container." --tac -1 ${containeri} \
    --preview "kubectl get pod ${podName} -o json | \
                       jq -C '.status.containerStatuses[], .status.initContainerStatuses[] | select(.name == \"step-{}\")' && \
                       kubectl logs ${podName} -c step-{}")
    [[ -n ${containers} ]] && containers=(-c step-${containers})
else
    containers=(--all-containers --max-log-requests=10)
fi

t=$(basename ${task});
if [[ -n ${use_tkn} ]];then
    tkn taskrun logs ${follow} ${t}
else
    kubectl logs ${follow} ${podName} ${containers[@]}
fi
